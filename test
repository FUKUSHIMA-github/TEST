#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include<math.h>
#include "mt64.h"

#define Nx 34
#define Ny 17
#define N Nx*Ny /*格子点の数*/
#define kappa 0.40/*拡散係数 κ*/
#define eta 0.20 /*粘性係数 η*/
#define nu 0.20 /*非圧縮効果 ν*/
#define c 0.20 /*浮力の定数*/
#define dT 0.10

void Buoyancy();
void ViscosityAndPressureEffect();
void HeatDiffusion();
void Advection();

double vx[Nx][Ny];/*水平方向速度*/
double vy[Nx][Ny]; /*鉛直方向速度*/
double E[Nx][Ny];/*内部エネルギー*/

FILE *fout;
 

int main(){
 int step,i,j;
 
 unsigned long long init[4]={74565ULL, 144470ULL, 214375ULL, 284280ULL}, length=4;
 unsigned long long init_seed = 810ULL;
 unsigned long long i_tmp;

 fout = fopen("test0000.d","w");
 
 init_by_array64(init, length);  /*配列で初期化*/
 
  for(i=0;i<Nx*Ny;i++){i_tmp = genrand64_int64();} /*[0, 2^64-1]範囲の整数乱数を生成*/
  
  double deltaT = (0.1-(-0.1))/(Ny-1);  /*温度勾配*/
  
  for(i=0;i<Nx;i++){
   for(j=0;j<Ny;j++){
    vx[i][j] = 2.0*genrand64_real1() - 1.0;
    vy[i][j] = 2.0*genrand64_real2() - 1.0;
    E[i][j] = genrand64_real3()/10; 
   }
  }   
 
  for(i=0;i<Nx;i++){  
    /*温度*/
    E[i][0] = dT; 
    E[i][Ny-1] = -dT;
     /*速度(固定境界)*/
    if(i==0){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real2()/10.0;
    }else if(i>0 && i<(Nx/2)-1){
    vx[i][0] = 1.0 - genrand64_real3()/10.0;
    vx[i][Ny-1] = -1.0 + genrand64_real1()/10.0 ;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==(Nx/2)-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real2()/10.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==Nx/2){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real3()/10.0;
    vy[i][Ny-1] = 0.0;    
    }else if(i>Nx/2&&i<Nx-1){
    vx[i][0] = -1.0 + genrand64_real3()/10.0;
    vx[i][Ny-1] = 1.0 - genrand64_real1()/10.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;      
    }else if(i==Nx-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real2()/10.0;
    }
  }
   
  for(i=0;i<Nx;i++){
   for(j=0;j<Ny;j++){  
    fprintf(fout, "%d %d %.10lf %.10lf %.10lf\n",i, j,vx[i][j],vy[i][j],E[i][j]);
   }
   fprintf(fout,"\n");
  }
 
 fclose(fout);
  
char outfile1[25],file_top1[15]="test",tmp1[6]= "0000",type[3]= ".d";
 
 for(step=1;step<101;step++){ 
  Buoyancy();/*step1 浮力*/
  ViscosityAndPressureEffect(); /*step2 粘性+非圧縮*/  
  HeatDiffusion; /*step3 拡散*/   
  Advection();/*step4 移流*/
   
   strcpy(outfile1,file_top1);
   sprintf(tmp1,"%04d",step);
   strcat(outfile1,tmp1);
   strcat(outfile1,type);
   fout = fopen(outfile1, "w"); 
    for(i=0;i<Nx;i++){
     for(j=0;j<Ny;j++){  
      fprintf(fout, "%d %d %.10lf %.10lf %.10lf\n",i, j,vx[i][j],vy[i][j],E[i][j]);
     }
    fprintf(fout,"\n");
    } 
  fclose(fout); 
 }
 
  for(step=101;step<5001;step++){ 
  Buoyancy();/*step1 浮力*/
  ViscosityAndPressureEffect(); /*step2 粘性+非圧縮*/  
  HeatDiffusion; /*step3 拡散*/   
  Advection();/*step4 移流*/
  
  if(step%20==0){
   strcpy(outfile1,file_top1);
   sprintf(tmp1,"%04d",step);
   strcat(outfile1,tmp1);
   strcat(outfile1,type);
   fout = fopen(outfile1, "w"); 
    for(i=0;i<Nx;i++){
     for(j=0;j<Ny;j++){  
      fprintf(fout, "%d %d %.10lf %.10lf %.10lf\n",i, j,vx[i][j],vy[i][j],E[i][j]);
     }
    fprintf(fout,"\n");
    }   
  fclose(fout); 
  }
 } 
 return 0;
}


void Buoyancy(){  /*浮力(温度が高いサイトが上昇する)*/
 int i,j;

  for(i=0;i<Nx;i++){
   /*温度*/
    E[i][0] = dT; 
    E[i][Ny-1] = -dT;
    /*速度(固定境界)*/
    if(i==0){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real1()/10.0;
    }else if(i>0 && i<(Nx/2)-1){
    vx[i][0] = 1.0 - genrand64_real3()/10.0;
    vx[i][Ny-1] = -1.0 + genrand64_real2()/10.0 ;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==(Nx/2)-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real3()/10.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==Nx/2){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real3()/10.0;
    vy[i][Ny-1] = 0.0;    
    }else if(i>Nx/2&&i<Nx-1){
    vx[i][0] = -1.0 + genrand64_real3()/10.0;
    vx[i][Ny-1] = 1.0 - genrand64_real1()/10.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;      
    }else if(i==Nx-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real2()/10.0;
    }
  } 

  for(i=0;i<Nx;i++){
   for(j=1;j<Ny-1;j++){
    vy[i][j] = vy[i][j] + (c/2.0)*(2.0*E[i][j] - E[(i+1)%Nx][j] - E[(i-1+Nx)%Nx][j]);
    vx[i][j] = vx[i][j];    
   }
  } 
  
 }

 
void ViscosityAndPressureEffect(){  /*粘性は離散化されたラプラス演算子.非圧縮効果を表現するため、∇(∇・v)を離散化したダイナミクス*/
 int i,j;
 double laplacian_vx,laplacian_vy,grad_div_vx,grad_div_vy; 
 
   for(i=0;i<Nx;i++){
     /*速度(固定境界)*/
    if(i==0){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real1()/10.0;
    }else if(i>0 && i<(Nx/2)-1){
    vx[i][0] = 1.0 - genrand64_real3()/10.0;
    vx[i][Ny-1] = -1.0 + genrand64_real2()/10.0 ;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==(Nx/2)-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real3()/10.0;
    vy[i][Ny-1] = 0.0;
    }else if(i==Nx/2){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 1.0 - genrand64_real3()/10.0;
    vy[i][Ny-1] = 0.0;    
    }else if(i>Nx/2&&i<Nx-1){
    vx[i][0] = -1.0 + genrand64_real3()/10.0;
    vx[i][Ny-1] = 1.0 - genrand64_real1()/10.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = 0.0;      
    }else if(i==Nx-1){
    vx[i][0] = 0.0;
    vx[i][Ny-1] = 0.0;    
    vy[i][0] = 0.0;
    vy[i][Ny-1] = -1.0 + genrand64_real2()/10.0;
    }
  } 
  for(i=0;i<Nx;i++){
   for(j=1;j<Ny-1;j++){
     laplacian_vx = (1.0/4.0)*(vx[(i-1+Nx)%Nx][j] + vx[(i+1)%Nx][j] + vx[i][j-1] + vx[i][j+1] - 4.0*vx[i][j]); /*△vx(x,y)の計算*/
     laplacian_vy = (1.0/4.0)*(vy[(i-1+Nx)%Nx][j] + vy[(i+1)%Nx][j] + vy[i][j-1] + vy[i][j+1] - 4.0*vy[i][j]); /*△vy(x,y)の計算*/
     
     grad_div_vx  = (1.0/2.0)*(vx[(i+1)%Nx][j] + vx[(i-1+Nx)%Nx][j]) - vx[i][j] + (1.0/4.0)*(vy[(i+1)%Nx][j+1] + vy[(i-1+Nx)%Nx][j-1] - vy[(i+1)%Nx][j-1] - vy[(i-1+Nx)%Nx][j+1]);/*∇(∇・v(x,y))の計算*/
     grad_div_vy  = (1.0/2.0)*(vy[(i+1)%Nx][j] + vy[(i-1+Nx)%Nx][j]) - vy[i][j] + (1.0/4.0)*(vx[(i+1)%Nx][j+1] + vx[(i-1+Nx)%Nx][j-1] - vx[(i+1)%Nx][j-1] - vx[(i-1+Nx)%Nx][j+1]);/*∇(∇・v(x,y))の計算*/
    
     vx[i][j] =  vx[i][j] + nu*laplacian_vx + eta*grad_div_vx;
     vy[i][j] =  vy[i][j] + nu*laplacian_vy + eta*grad_div_vy;
   }
  }
  
} 

void HeatDiffusion(){  /*拡散*/
 int i,j;
 double laplacian_E;
 
  for(i=0;i<Nx;i++){
   /*温度*/
    E[i][0] = dT; 
    E[i][Ny-1] = -dT;   
  }
 
  for(i=0;i<Nx;i++){
   for(j=1;j<Ny-1;j++){
     laplacian_E = (1.0/4.0)*(E[(i-1+Nx)%Nx][j] + E[(i+1)%Nx][j] + E[i][j-1] + E[i][j+1] - 4.0*E[i][j]); /*△E(x,y)の計算*/   
     E[i][j] =  E[i][j] + kappa*laplacian_E;
    }
   }
} 


void Advection(){ 
 int i,j,p;
 int nearestI,nearestJ;
 double dx,dy; /*若い近接格子点との距離*/
 double weight00,weight01,weight10,weight11; /*重み*/
 double tmpvx[Nx][Ny],tmpvy[Nx][Ny],tmpE[Nx][Ny]; /*一時的な配列を用意*/
 double P[N][2]; /* 粒子の位置 */
 double V[N][2]; /* 粒子の速度 */
 double E[N][1]; /*粒子のエネルギー*/
  
 /*一時的な配列の初期化*/
 for(i=0;i<Nx;i++){
  for(j=0;j<Ny;j++){
   tmpvx[i][j] = 0.0;
   tmpvy[i][j] = 0.0;
   tmpE[i][j] = 0.0;
  }
 }
 
 int particle = 0;
 for(i=0;i<Nx;i++){
  for(j=0;j<Ny;j++){
   P[particle][0] = 0.0;
   P[particle][1] = 0.0;
   V[particle][0] = 0.0;
   V[particle][1] = 0.0;
   E[particle][0] = 0.0;
   particle++;
  }
 }
 
 /* 粒子の配置と速度の設定 */
 int particleCount = 0;
 for(i=0;i<Nx;i++){
  for(j=0;j<Ny;j++){
   P[particleCount][0] = i;/* x座標をiとする*/
   P[particleCount][1] = j;/* y座標をjとする*/
   V[particleCount][0] = vx[i][j];
   V[particleCount][1] = vy[i][j];
   E[particleCount][0] = E[i][j];
   particleCount++;
  }
 }

  /*粒子の移動*/
 for(i=0;i<N;i++){
  P[i][0] = P[i][0] + V[i][0];
  P[i][1] = P[i][1] + V[i][1];

 /*周期境界条件（水平方向)*/
  if(P[i][0]<0){
   P[i][0] = P[i][0] + Nx;
  }else if(P[i][0]>(Nx-1)){
   P[i][0] = P[i][0] - Nx;
  }

  /* 反射条件（垂直方向)*/
  if(P[i][1]<0){
   P[i][1] = -P[i][1];
   V[i][1] = -V[i][1];
  }else if(P[i][1]>(Ny-1)){
   P[i][1] = 2.0*(Ny-1.0) - P[i][1];
   V[i][1] = -V[i][1];
  }
 }

 /*粒子の４つの近接格子点のうち左下の格子点 (i, j) との距離(dx, dy)を計算*/
  for(p=0;p<N;p++){
  
   if(-1.0<P[p][0] && P[p][0]<0.0){
    nearestI = Nx-1;
    dx = (int)(P[p][0]+1.0); 
    if(dx<0.0||dx>1.0){printf("Error 1");}
   }else if((Nx-1.0)<P[p][0] && P[p][0]<Nx){ 
    nearestI = Nx-1;
    dx = P[p][0] - (int)(Nx-1.0);
    if(dx<0.0||dx>1.0){printf("Error 2");}
   }else if(0.0<=P[p][0] && P[p][0]<=Nx-1.0){
    nearestI = (int)P[p][0];
    dx = P[p][0] - (double)nearestI; 
    if(dx<0.0||dx>1.0){printf("Error 3");}
   }
    
   nearestJ = (int)P[p][1];
   dy = P[p][1] - nearestJ;
       

   weight00 = (1.0-dx)*(1.0-dy);
   weight01 = dx*(1.0-dy);
   weight10 = (1.0-dx)*dy;
   weight11 = dx*dy;
    
   tmpvx[nearestI][nearestJ] += weight00*V[p][0];
   tmpvx[(nearestI+1)%Nx][nearestJ] += weight01*V[p][0];
   tmpvx[nearestI][nearestJ+1] += weight10*V[p][0];
   tmpvx[(nearestI+1)%Nx][nearestJ+1] += weight11*V[p][0];

   tmpvy[nearestI][nearestJ] += weight00*V[p][1];
   tmpvy[(nearestI+1)%Nx][nearestJ] += weight01*V[p][1];
   tmpvy[nearestI][nearestJ+1] += weight10*V[p][1];
   tmpvy[(nearestI+1)%Nx][nearestJ+1] += weight11*V[p][1];

   tmpE[nearestI][nearestJ] += weight00*E[p][0];
   tmpE[(nearestI+1)%Nx][nearestJ] += weight01*E[p][0];
   tmpE[nearestI][nearestJ+1] += weight10*E[p][0];
   tmpE[(nearestI+1)%Nx][nearestJ+1] += weight11*E[p][0];
   
  }
 
 
 for(i=0;i<Nx;i++){
  for(j=0;j<Ny;j++){
   vx[i][j] = tmpvx[i][j];
   vy[i][j] = tmpvy[i][j];
   E[i][j]  = tmpE[i][j];
  }
 }
 
 
}
